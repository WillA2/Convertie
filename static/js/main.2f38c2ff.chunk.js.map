{"version":3,"sources":["component/Spotify_Logo_CMYK_Green.png","component/SpotifyLogin.js","component/Search.js","component/YoutubeAxios.js","component/Youtube.js","component/SpotifyGui.js","App.js","component/parseURL.js","reportWebVitals.js","index.js"],"names":["process","AUTH_URL","REACT_APP_KEY","REACT_APP_CLIENTID","SpotifyLogin","props","state","data","className","href","src","Spotifylogo","React","Component","Search","id","onSearchChange","e","setState","target","value","onSubmit","preventDefault","youtubeLink","initialIndex","indexOf","substring","onSearch","this","onChange","placeholder","type","axios","create","baseURL","params","part","maxResults","key","headers","Youtube","onClick","a","YoutubeAxios","get","playlistId","promise","youtubeDataCallback","console","log","items","embed","snippet","resourceId","videoId","title","width","height","frameBorder","allowFullScreen","spotifyApi","SpotifyWebApi","SpotifyGui","convert","tracksArr","createPlaylist","addToPlaylist","ytData","i","length","toLowerCase","replace","searchTracks","then","body","tracks","err","error","res","push","addTracksToPlaylist","setAccessToken","token","spotify_token","url","includes","parsedURLArr","split","parseURL","window","location","App","bind","newData","history","pushState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f38c2ff.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Spotify_Logo_CMYK_Green.8eef091b.png\";","import React from 'react'\r\nimport Spotifylogo from './Spotify_Logo_CMYK_Green.png'\r\nconst {REACT_APP_KEY, REACT_APP_CLIENTID} = process.env\r\nconst AUTH_URL = \"https://accounts.spotify.com/authorize?client_id=\"\r\n    +REACT_APP_CLIENTID+\r\n    \"&redirect_uri=http://WillA2.github.io/convertie/&response_type=token&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state%20playlist-modify-private%20playlist-modify-public\"\r\n\r\n/*Helps with authenticating the user*/\r\nclass SpotifyLogin extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            data:[]\r\n        }\r\n      }\r\n\r\n    render(){\r\n        return (\r\n            <div className = 'description'>\r\n                <a href={AUTH_URL} >\r\n                    <img src = {Spotifylogo} className = 'logo'></img>\r\n                </a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SpotifyLogin\r\n","import React from 'react'\r\n\r\n\r\nclass Search extends React.Component {\r\n    state={\r\n        id :''\r\n    }\r\n\r\n    onSearchChange = e => {\r\n        this.setState({id: e.target.value})\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault()\r\n        var youtubeLink = this.state.id\r\n        var initialIndex = youtubeLink.indexOf('list=')\r\n        if (initialIndex != -1){\r\n            youtubeLink = youtubeLink.substring(initialIndex + 5)\r\n        }\r\n        this.props.onSearch(youtubeLink)\r\n    }\r\n    render(){ \r\n        return (\r\n            <form\r\n            onSubmit = {this.onSubmit}>\r\n                <div>\r\n                    <input \r\n                        id = 'a'\r\n                        value = {this.state.id}\r\n                        onChange={this.onSearchChange}\r\n                        placeholder = 'Search'\r\n                    />\r\n                </div>\r\n                <input type='submit' value='Search playlist'/>\r\n            </form>\r\n        )\r\n    }\r\n   \r\n    \r\n}\r\n\r\nexport default Search\r\n","import axios from 'axios'\r\n\r\nconst {REACT_APP_KEY} = process.env\r\nexport default axios.create({\r\n    baseURL:'https://www.googleapis.com/youtube/v3/',\r\n    params:{\r\n        part:'snippet',\r\n        maxResults:50,\r\n        key: REACT_APP_KEY\r\n    },\r\n    headers:{}\r\n})\r\n\r\n","import React from 'react'\r\nimport Search from './Search'\r\nimport YoutubeAxios from './YoutubeAxios'\r\n\r\n/*Queries Youtube's Api to find a specific playlist then\r\n  stores each video of the playlist into an array*/\r\nclass Youtube extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            data:''\r\n        }\r\n      }\r\n /*Once the search bar has been filled, search the API for the playlist*/     \r\n  onClick = async id => {\r\n    const promise = await YoutubeAxios.get('/playlistItems',{\r\n      params: {\r\n        playlistId: id\r\n      }\r\n    })\r\n    const {youtubeDataCallback} = this.props\r\n    youtubeDataCallback(promise)\r\n    console.log(promise.data.items)\r\n    const embed = \"https://www.youtube.com/embed/\" + promise.data.items[0].snippet.resourceId.videoId \r\n    this.setState({\r\n      data: embed\r\n    })\r\n\r\n    \r\n   \r\n  }\r\n  render(){\r\n    return (\r\n        <div>\r\n      \r\n             <Search onSearch ={this.onClick} />\r\n                {\r\n      \r\n                        <iframe title={this.state.data} width= \"500\" height = \"300\" src={this.state.data} frameBorder=\"0\" allowFullScreen>\r\n                       </iframe>\r\n             \r\n                } \r\n   \r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Youtube\r\n","\r\nimport React from 'react'\r\nimport SpotifyWebApi from 'spotify-web-api-node'\r\n\r\nconst spotifyApi = new SpotifyWebApi\r\n/*Used to communicate with Spotify's Api*/\r\nclass SpotifyGui extends React.Component{\r\n    \r\n    onClick = async () => {\r\n        var tracksArr = await this.convert()\r\n        var playlistId = await this.createPlaylist()\r\n        this.addToPlaylist(playlistId, tracksArr)\r\n    }\r\n\r\n    /*Converts youtube video into a spotify track and stores \r\n        it as an array*/\r\n    convert = async () => {\r\n        var i\r\n        var ytData = this.props.ytData.data.items\r\n        var tracksArr = []\r\n        for (i = 0; i < ytData.length; i++){\r\n            \r\n            var title = ytData[i].snippet.title.toLowerCase()\r\n            \r\n            /*Gets rid of anything in the video title that\r\n                can mess up the search results in Spotify*/\r\n            title = title.replace('(official music video)', '')\r\n            title = title.replace('(official video)', '')\r\n            title = title.replace('(official lyric video)', '')\r\n            title = title.replace('(lyric video)', '')\r\n            title = title.replace('(official live performance)', '')\r\n            title = title.replace('(official performance)', '')\r\n            title = title.replace('(live performance)', '')\r\n            title = title.replace('ft.', 'feat.')\r\n            title = title.replace('[official audio]', '')\r\n            title = title.replace('-', '')\r\n            title = title.replace('[lyrics]', '')\r\n            title = title.replace('[hq]', '')\r\n            title = title.replace('(audio)', '')\r\n            title = title.replace('[audio]', '')\r\n            title = title.replace('(explicit)', '')\r\n            title = title.replace('(clean version)', '')\r\n\r\n            /*Searches through Spotify and retrieve the first track it finds*/\r\n            var res = await spotifyApi.searchTracks(title)\r\n                .then(function(data) {\r\n                    if (data.body.tracks.items[0] != null){\r\n                        var trackId = data.body.tracks.items[0].id;\r\n                        return trackId\r\n                    }\r\n                    }, function(err) {\r\n                console.error(err);\r\n                });\r\n            if (res && res != '[Deleted video]')\r\n                tracksArr.push('spotify:track:'+res)\r\n            \r\n        }\r\n        return tracksArr\r\n    }\r\n\r\n    /*creates a private playlist for the user*/\r\n    createPlaylist = async () =>{\r\n        var res = await spotifyApi.createPlaylist('youtube playlist', { 'description': 'My description', 'public': false })\r\n        .then(function(data) {\r\n            console.log('Created playlist!', data.body.id);\r\n            return data.body.id\r\n        }, function(err) {\r\n            console.log('Something went wrong!', err);\r\n        });\r\n        return res\r\n    }\r\n\r\n    /*stores all the tracks that were converted into the newly made playlist*/\r\n    addToPlaylist = async (playlistId, tracksArr) => {\r\n              console.log(tracksArr)\r\n              spotifyApi.addTracksToPlaylist(playlistId, tracksArr)\r\n                .then(function(data) {\r\n                console.log('Added tracks to playlist!');\r\n                                    }, function(err) {\r\n                                        console.log('Something went wrong!', err);\r\n                                    });\r\n                             \r\n    }\r\n\r\n\r\nrender(){\r\n    return (\r\n        <div>\r\n            {spotifyApi.setAccessToken(this.props.token)}\r\n            <button onClick = {this.onClick} className  = 'button2'>\r\n                Convert\r\n            </button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SpotifyGui","\nimport React from 'react'\nimport SpotifyLogin from './component/SpotifyLogin'\nimport Youtube from './component/Youtube'\nimport SpotifyGui from './component/SpotifyGui'\nimport parseURL from './component/parseURL'\n\nconst spotify_token = parseURL(window.location.href)\n/*sets up the app*/\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      ytData:[]\n    }\n    this.youtubeDataCallback = this.youtubeDataCallback.bind(this)\n  }\n  \n  /*Get youtube data from Youtube component*/\n  youtubeDataCallback (newData){\n   this.setState({\n      ytData:newData\n    })\n  }\n\n \n  render(){\n    return (\n      <div className=\"header\">\n        <div className=\"description\">\n          <b>\n            Convertie will convert your youtube playlist into a privated spotify playlist \n            <br/>\n            1. Connect with your Spotify account\n            <br/>\n            2. Search the playlist first and preview the first video to make sure you have the right playlist\n            <br/>\n            3. A convert button will appear. Press on convert\n            <br/>\n            4. After a minute, in your spotify app you will notice a new playlist called \"youtube playlist\"\n          </b>\n        </div>\n         {!spotify_token ?(\n          <SpotifyLogin/>\n         ) : (\n           <div className = 'button'>\n            {window.history.pushState({},null, '/')}\n          \n         \n              <Youtube youtubeDataCallback = {this.youtubeDataCallback} />\n              <SpotifyGui token = {spotify_token} ytData = {this.state.ytData} /> \n           \n           \n           </div>\n           \n         )}\n      </div>\n      \n    );\n  }\n\n}\nexport default App;\n","import React from 'react'\r\n\r\n/*Parses the current URL to retrieve Spotify's access token.\r\n   Other information such as expiration time is also saved \r\n   for potentially later uses*/\r\nexport default function parseURL(url) {\r\n    if (url.includes('#') == false){\r\n        return null\r\n    }\r\n    url = url.substring(url.indexOf('#') + 1)\r\n    var parsedURLArr = url.split('&')\r\n    var i\r\n    for (i =0; i < parsedURLArr.length; i++){\r\n        parsedURLArr[i] = parsedURLArr[i].substring(parsedURLArr[i].indexOf('=') + 1)\r\n    }\r\n    return parsedURLArr[0]\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}